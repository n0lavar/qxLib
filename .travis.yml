language: cpp
dist: bionic
osx_image: xcode10.3

compiler:
  - gcc
  - clang

os:
  - linux
#  - osx
  
arch:
  - amd64
#  - ppc64le
#  - s390x
#  - arm64
  
env:
  - BUILD_CONFIGURATION=Debug
  - BUILD_CONFIGURATION=Release

addons:
  apt:
    sources:
    - sourceline: 'deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-9 main'
      key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'
    - sourceline: 'ppa:ubuntu-toolchain-r/test'
    packages:
    - clang-9
    - cmake
    - gcc-9
    - g++-9
    - libglm-dev
  homebrew:
    packages:
    - cmake
    - llvm@9
    - glm
    update: true
    
install:
  # The following Homebrew packages aren't linked by default, and need to be
  # prepended to the path explicitly.
  - if [ "$TRAVIS_OS_NAME" = "osx" ]; then
      export PATH="$(brew --prefix llvm)/bin:$PATH";
    fi
  # /usr/bin/gcc points to an older compiler on both Linux and macOS.
  - if [ "$CXX" = "g++" ]; 
      then export CXX="g++-9" CC="gcc-9"; 
    fi
  # /usr/bin/clang points to an older compiler on both Linux and macOS.
  #
  # Homebrew's llvm package doesn't ship a versioned clang++ binary, so the values
  # below don't work on macOS. Fortunately, the path change above makes the
  # default values (clang and clang++) resolve to the correct compiler on macOS.
  - if [ "$TRAVIS_OS_NAME" = "linux" ]; then
      if [ "$CXX" = "clang++" ]; then 
        export CXX="clang++-9" CC="clang-9"; 
      fi;
    fi
    
  - echo ${CC}
  - echo ${CXX}
  - ${CXX} --version
  - cmake --version
  
before_script:  
  # set c++17
  - export CPP_STANDARD=17

  # install gtest manually 
  - sudo wget https://github.com/google/googletest/archive/release-1.10.0.tar.gz
  - tar xf release-1.10.0.tar.gz
  - cd googletest-release-1.10.0
  - cmake . -DCMAKE_BUILD_TYPE=$BUILD_CONFIGURATION
  - make  
  
  - sudo cp -a googletest/include/gtest /usr/local/include
  - sudo cp -a lib/*.a /usr/local/lib/
  - cd ..  

script:
  - mkdir build
  - cd build
  - cmake .. -DQX_DEBUG=TRUE -DCODE_COVERAGE=ON -DCMAKE_BUILD_TYPE=$BUILD_CONFIGURATION
  - make -j8
  
after_success:
  - bash <(curl -s https://codecov.io/bash)