language: cpp
dist: bionic
osx_image: xcode10.3

compiler:
  - gcc
  - clang

os:
  - linux
  - osx
  
arch:
  - amd64
#  - ppc64le
#  - s390x
#  - arm64
  
env:
  - BUILD_CONFIGURATION=Debug
  - BUILD_CONFIGURATION=Release

addons:
  apt:
    sources:
    - sourceline: 'deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-9 main'
      key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'
    - sourceline: 'ppa:ubuntu-toolchain-r/test'
    packages:
    - clang-9
    - gcc-8
    - g++-8 # lcov supports 8 version only
    - libglm-dev
  homebrew:
    packages:
    - llvm@9
    - glm
    update: true
    
install:
  # The following Homebrew packages aren't linked by default, and need to be
  # prepended to the path explicitly.
  - if [ "$TRAVIS_OS_NAME" = "osx" ]; then
      export PATH="$(brew --prefix llvm)/bin:$PATH";
    fi
    
  # /usr/bin/gcc points to an older compiler on both Linux and macOS.
  - if [ "$CXX" = "g++" ]; then 
      export CXX="g++-8" CC="gcc-8"; 
    fi
  # /usr/bin/clang points to an older compiler on both Linux and macOS.

  # Homebrew's llvm package doesn't ship a versioned clang++ binary, so the values
  # below don't work on macOS. Fortunately, the path change above makes the
  # default values (clang and clang++) resolve to the correct compiler on macOS.
  - if [ "$TRAVIS_OS_NAME" = "linux" ]; then
      if [ "$CXX" = "clang++" ]; then 
        export CXX="clang++-9" CC="clang-9"; 
      fi;
    fi
    
  - echo ${CC}
  - echo ${CXX}
  - ${CXX} --version
  - gcov-8 --version
  
before_script:  
  # set c++17
  - export CPP_STANDARD=17
  
  # install cmake 3.17 manually
  - if [ "$TRAVIS_OS_NAME" = "linux" ]; then
      package_name=cmake-3.17.0-Linux-x86_64;
    else
      package_name=cmake-3.17.0-Darwin-x86_64;
    fi
  - wget https://github.com/Kitware/CMake/releases/download/v3.17.0/$package_name.sh
  - sudo mkdir /cmake
  - sudo sh $package_name.sh --prefix=/cmake --skip-license
  - /cmake/bin/cmake --version

  # install gtest manually 
  - sudo wget https://github.com/google/googletest/archive/release-1.10.0.tar.gz
  - tar xf release-1.10.0.tar.gz
  - cd googletest-release-1.10.0
  - /../cmake/bin/cmake . -DCMAKE_BUILD_TYPE=$BUILD_CONFIGURATION
  - /../cmake/bin/cmake --build .
  - sudo cp -a googletest/include/gtest /usr/local/include
  - sudo cp -a lib/*.a /usr/local/lib/
  - cd ..  
  
script:
  
  # build with test info
  - mkdir build
  - cd build
  - /../cmake/bin/cmake .. -DCMAKE_BUILD_TYPE=$BUILD_CONFIGURATION
  - /../cmake/bin/cmake --build .
  
  # run tests
  - ctest --output-on-failure -j $(nproc)

after_success:
  - |
    if [ "$TRAVIS_OS_NAME" = "linux" ]; then
      if [ "$TRAVIS_COMPILER" = "gcc" ]; then
        if [ "$BUILD_CONFIGURATION" = "Debug" ]; then
          
          # copy all required files from subdirectories
          find . -name \*.gcda -exec cp {} . \;
          find . -name \*.gcno -exec cp {} . \;
          find . -name \*.o    -exec cp {} . \;          
          
          # install lcov manually
          sudo wget https://github.com/linux-test-project/lcov/releases/download/v1.14/lcov-1.14.tar.gz
          tar xf lcov-1.14.tar.gz
          ./lcov-1.14/bin/lcov --gcov-tool gcov-8 --directory . --capture --output-file coverage.info
          
          # generate coverage report
          bash <(curl -s https://codecov.io/bash) -X gcov
          
        fi
      fi
    fi
    